const http = require('http');

console.log('üß™ Test de v√©rification du probl√®me de token r√©solu...\n');

// Configuration
const AUTH_URL = 'localhost';
const AUTH_PORT = 3001;
const PAYMENT_URL = 'localhost';
const PAYMENT_PORT = 3005;

// Fonction pour faire une requ√™te HTTP
function makeRequest(host, port, path, method = 'GET', data = null, headers = {}) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: host,
      port: port,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };

    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        try {
          const jsonBody = JSON.parse(body);
          resolve({ status: res.statusCode, data: jsonBody });
        } catch (e) {
          resolve({ status: res.statusCode, data: body });
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    req.end();
  });
}

// Test complet
async function testPaymentFlow() {
  try {
    console.log('1Ô∏è‚É£ Test de connexion...');
    const loginResponse = await makeRequest(AUTH_URL, AUTH_PORT, '/api/auth/login', 'POST', {
      email: 'test@example.com',
      password: 'password123'
    });

    if (loginResponse.status !== 200) {
      console.log('‚ùå √âchec de la connexion:', loginResponse.data.message);
      return;
    }

    const token = loginResponse.data.token;
    console.log('‚úÖ Connexion r√©ussie, token r√©cup√©r√©');

    console.log('\n2Ô∏è‚É£ Test de l\'endpoint /me...');
    const meResponse = await makeRequest(AUTH_URL, AUTH_PORT, '/api/auth/me', 'GET', null, {
      'Authorization': `Bearer ${token}`
    });

    if (meResponse.status !== 200) {
      console.log('‚ùå √âchec de l\'endpoint /me:', meResponse.data.message);
      return;
    }
    console.log('‚úÖ Endpoint /me fonctionne');

    console.log('\n3Ô∏è‚É£ Test de l\'endpoint de paiement...');
    const paymentResponse = await makeRequest(PAYMENT_URL, PAYMENT_PORT, '/api/intent', 'POST', {
      courseId: '68a7cfe5c2ed51bca84fc383',
      amount: 3499,
      currency: 'EUR'
    }, {
      'Authorization': `Bearer ${token}`
    });

    if (paymentResponse.status === 200) {
      console.log('üéâ SUCC√àS ! Le probl√®me de token est r√©solu !');
      console.log('‚úÖ Paiement cr√©√© avec succ√®s');
      console.log('üí≥ Payment Intent ID:', paymentResponse.data.paymentIntentId);
    } else {
      console.log('‚ùå √âchec de l\'endpoint de paiement:', paymentResponse.status);
      console.log('üìã R√©ponse:', JSON.stringify(paymentResponse.data, null, 2));
      
      if (paymentResponse.status === 401) {
        console.log('\nüîç Le probl√®me de token persiste. V√©rifiez que :');
        console.log('   1. Le service de paiement a √©t√© red√©marr√©');
        console.log('   2. Les deux services utilisent le m√™me secret JWT');
        console.log('   3. Le token n\'est pas expir√©');
      }
    }

  } catch (error) {
    console.log('‚ùå Erreur lors du test:', error.message);
  }
}

testPaymentFlow();
