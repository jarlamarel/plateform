const axios = require('axios');

const API_BASE_URL = 'http://localhost:3001/api';

async function testSimple() {
  console.log('üß™ Test simple de l\'API d\'authentification...\n');

  try {
    // Test 1: V√©rifier si le service r√©pond
    console.log('1Ô∏è‚É£ Test: V√©rification de la disponibilit√© du service');
    try {
      await axios.get(`${API_BASE_URL}/auth`);
      console.log('   ‚úÖ Service d\'authentification accessible');
    } catch (error) {
      if (error.code === 'ECONNREFUSED') {
        console.log('   ‚ùå Service d\'authentification non accessible');
        console.log('   Assurez-vous que le service est d√©marr√© sur le port 3001');
        return;
      }
      console.log('   ‚ÑπÔ∏è  Service accessible (erreur attendue pour GET /auth)');
    }
    console.log('');

    // Test 2: Cr√©er un utilisateur de test
    console.log('2Ô∏è‚É£ Test: Cr√©ation d\'un utilisateur de test');
    try {
      const registerResponse = await axios.post(`${API_BASE_URL}/auth/register`, {
        email: 'test@example.com',
        password: 'password123',
        firstName: 'Test',
        lastName: 'User'
      });
      
      console.log('   ‚úÖ Utilisateur cr√©√© avec succ√®s');
      console.log(`   Token: ${registerResponse.data.token ? 'Pr√©sent' : 'Absent'}`);
      console.log(`   User: ${registerResponse.data.user ? 'Pr√©sent' : 'Absent'}`);
      
      const token = registerResponse.data.token;
      
      // Test 3: Mise √† jour du profil
      console.log('\n3Ô∏è‚É£ Test: Mise √† jour du profil');
      try {
        const updateResponse = await axios.put(`${API_BASE_URL}/users/me`, {
          firstName: 'Nouveau Pr√©nom',
          lastName: 'Nouveau Nom'
        }, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        console.log('   ‚úÖ Mise √† jour r√©ussie');
        console.log(`   Nouveau nom: ${updateResponse.data.firstName} ${updateResponse.data.lastName}`);
        
      } catch (updateError) {
        console.log('   ‚ùå Erreur lors de la mise √† jour:');
        console.log(`   Status: ${updateError.response?.status}`);
        console.log(`   Message: ${updateError.response?.data?.message}`);
        console.log(`   Error: ${updateError.response?.data?.error}`);
      }
      
    } catch (registerError) {
      if (registerError.response?.status === 400 && registerError.response?.data?.message?.includes('d√©j√† utilis√©')) {
        console.log('   ‚ÑπÔ∏è  Utilisateur existe d√©j√†, tentative de connexion');
        
        // Essayer de se connecter
        try {
          const loginResponse = await axios.post(`${API_BASE_URL}/auth/login`, {
            email: 'test@example.com',
            password: 'password123'
          });
          
          console.log('   ‚úÖ Connexion r√©ussie');
          const token = loginResponse.data.token;
          
          // Test de mise √† jour
          console.log('\n3Ô∏è‚É£ Test: Mise √† jour du profil (apr√®s connexion)');
          try {
            const updateResponse = await axios.put(`${API_BASE_URL}/users/me`, {
              firstName: 'Nouveau Pr√©nom',
              lastName: 'Nouveau Nom'
            }, {
              headers: {
                'Authorization': `Bearer ${token}`
              }
            });
            
            console.log('   ‚úÖ Mise √† jour r√©ussie');
            console.log(`   Nouveau nom: ${updateResponse.data.firstName} ${updateResponse.data.lastName}`);
            
          } catch (updateError) {
            console.log('   ‚ùå Erreur lors de la mise √† jour:');
            console.log(`   Status: ${updateError.response?.status}`);
            console.log(`   Message: ${updateError.response?.data?.message}`);
            console.log(`   Error: ${updateError.response?.data?.error}`);
            
            // Test avec des donn√©es vides
            console.log('\n4Ô∏è‚É£ Test: Mise √† jour avec lastName vide (doit √©chouer)');
            try {
              await axios.put(`${API_BASE_URL}/users/me`, {
                firstName: 'Test',
                lastName: ''
              }, {
                headers: {
                  'Authorization': `Bearer ${token}`
                }
              });
              console.log('   ‚ùå Erreur: La validation aurait d√ª √©chouer');
            } catch (validationError) {
              console.log('   ‚úÖ Validation correcte: lastName vide rejet√©');
              console.log(`   Message: ${validationError.response?.data?.message}`);
            }
          }
          
        } catch (loginError) {
          console.log('   ‚ùå Erreur lors de la connexion:');
          console.log(`   Status: ${loginError.response?.status}`);
          console.log(`   Message: ${loginError.response?.data?.message}`);
        }
      } else {
        console.log('   ‚ùå Erreur lors de la cr√©ation:');
        console.log(`   Status: ${registerError.response?.status}`);
        console.log(`   Message: ${registerError.response?.data?.message}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
    if (error.response) {
      console.error('   D√©tails:', error.response.data);
    }
  }
}

// Ex√©cuter le test
testSimple();


