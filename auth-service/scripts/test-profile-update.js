const axios = require('axios');

const API_BASE_URL = 'http://localhost:3001/api/auth';

// Fonction pour tester la mise √† jour du profil
async function testProfileUpdate() {
  console.log('üß™ Test de mise √† jour du profil utilisateur...\n');

  try {
    // Test 1: Connexion pour obtenir un token
    console.log('1Ô∏è‚É£ Test: Connexion utilisateur');
    const loginResponse = await axios.post(`${API_BASE_URL}/login`, {
      email: 'momo@gmail.com',
      password: 'password123'
    });
    
    const token = loginResponse.data.token;
    console.log('   ‚úÖ Connexion r√©ussie, token obtenu\n');

    // Test 2: Mise √† jour valide du profil
    console.log('2Ô∏è‚É£ Test: Mise √† jour valide du profil');
    const validUpdate = await axios.put(`${API_BASE_URL.replace('/auth', '/users')}/me`, {
      firstName: 'Momomo',
      lastName: 'Momo'
    }, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    console.log('   ‚úÖ Mise √† jour valide r√©ussie');
    console.log(`   Utilisateur: ${validUpdate.data.firstName} ${validUpdate.data.lastName}\n`);

    // Test 3: Test avec firstName vide
    console.log('3Ô∏è‚É£ Test: Mise √† jour avec firstName vide (doit √©chouer)');
    try {
      await axios.put(`${API_BASE_URL.replace('/auth', '/users')}/me`, {
        firstName: '',
        lastName: 'Momo'
      }, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      console.log('   ‚ùå Erreur: La validation aurait d√ª √©chouer');
    } catch (error) {
      if (error.response && error.response.status === 400) {
        console.log('   ‚úÖ Validation correcte: firstName vide rejet√©');
        console.log(`   Message: ${error.response.data.message}`);
      } else {
        console.log('   ‚ùå Erreur inattendue:', error.message);
      }
    }
    console.log('');

    // Test 4: Test avec lastName vide
    console.log('4Ô∏è‚É£ Test: Mise √† jour avec lastName vide (doit √©chouer)');
    try {
      await axios.put(`${API_BASE_URL.replace('/auth', '/users')}/me`, {
        firstName: 'Momomo',
        lastName: ''
      }, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      console.log('   ‚ùå Erreur: La validation aurait d√ª √©chouer');
    } catch (error) {
      if (error.response && error.response.status === 400) {
        console.log('   ‚úÖ Validation correcte: lastName vide rejet√©');
        console.log(`   Message: ${error.response.data.message}`);
      } else {
        console.log('   ‚ùå Erreur inattendue:', error.message);
      }
    }
    console.log('');

    // Test 5: Test avec email vide
    console.log('5Ô∏è‚É£ Test: Mise √† jour avec email vide (doit √©chouer)');
    try {
      await axios.put(`${API_BASE_URL.replace('/auth', '/users')}/me`, {
        email: ''
      }, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      console.log('   ‚ùå Erreur: La validation aurait d√ª √©chouer');
    } catch (error) {
      if (error.response && error.response.status === 400) {
        console.log('   ‚úÖ Validation correcte: email vide rejet√©');
        console.log(`   Message: ${error.response.data.message}`);
      } else {
        console.log('   ‚ùå Erreur inattendue:', error.message);
      }
    }
    console.log('');

    // Test 6: Test avec des espaces uniquement
    console.log('6Ô∏è‚É£ Test: Mise √† jour avec des espaces uniquement (doit √©chouer)');
    try {
      await axios.put(`${API_BASE_URL.replace('/auth', '/users')}/me`, {
        firstName: '   ',
        lastName: '   '
      }, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      console.log('   ‚ùå Erreur: La validation aurait d√ª √©chouer');
    } catch (error) {
      if (error.response && error.response.status === 400) {
        console.log('   ‚úÖ Validation correcte: espaces uniquement rejet√©s');
        console.log(`   Message: ${error.response.data.message}`);
      } else {
        console.log('   ‚ùå Erreur inattendue:', error.message);
      }
    }
    console.log('');

    // Test 7: Mise √† jour partielle (seulement firstName)
    console.log('7Ô∏è‚É£ Test: Mise √† jour partielle (seulement firstName)');
    const partialUpdate = await axios.put(`${API_BASE_URL.replace('/auth', '/users')}/me`, {
      firstName: 'Nouveau Pr√©nom'
    }, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    console.log('   ‚úÖ Mise √† jour partielle r√©ussie');
    console.log(`   Nouveau pr√©nom: ${partialUpdate.data.firstName}\n`);

    // Test 8: R√©cup√©ration du profil mis √† jour
    console.log('8Ô∏è‚É£ Test: R√©cup√©ration du profil mis √† jour');
    const profileResponse = await axios.get(`${API_BASE_URL.replace('/auth', '/users')}/me`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    console.log('   ‚úÖ Profil r√©cup√©r√© avec succ√®s');
    console.log(`   Pr√©nom: ${profileResponse.data.firstName}`);
    console.log(`   Nom: ${profileResponse.data.lastName}`);
    console.log(`   Email: ${profileResponse.data.email}\n`);

    console.log('üéâ Tous les tests termin√©s avec succ√®s!');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
    if (error.response) {
      console.error('   D√©tails:', error.response.data);
    }
  }
}

// Fonction pour cr√©er un utilisateur de test
async function createTestUser() {
  console.log('üë§ Cr√©ation d\'un utilisateur de test...\n');
  
  try {
    const response = await axios.post(`${API_BASE_URL}/register`, {
      email: 'momo@gmail.com',
      password: 'password123',
      firstName: 'Momo',
      lastName: 'Test'
    });
    
    console.log('‚úÖ Utilisateur de test cr√©√© avec succ√®s');
    console.log(`   Email: ${response.data.user.email}`);
    console.log(`   Nom: ${response.data.user.firstName} ${response.data.user.lastName}\n`);
    
  } catch (error) {
    if (error.response && error.response.status === 400 && error.response.data.message.includes('d√©j√† utilis√©')) {
      console.log('‚ÑπÔ∏è  Utilisateur de test existe d√©j√†\n');
    } else {
      console.error('‚ùå Erreur lors de la cr√©ation de l\'utilisateur de test:', error.message);
    }
  }
}

// Ex√©cuter les tests
async function main() {
  await createTestUser();
  await testProfileUpdate();
}

// Ex√©cuter le script
if (require.main === module) {
  main();
}

module.exports = { testProfileUpdate, createTestUser };
