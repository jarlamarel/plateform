const axios = require('axios');

const API_BASE_URL = 'http://localhost:3003/api/content';

async function testCoursesAPI() {
  console.log('üß™ Test de l\'API des cours...\n');

  try {
    // Test 1: V√©rifier si le service r√©pond
    console.log('1Ô∏è‚É£ Test: V√©rification de la disponibilit√© du service');
    try {
      await axios.get(`${API_BASE_URL}/courses`);
      console.log('   ‚úÖ Service de contenu accessible');
    } catch (error) {
      if (error.code === 'ECONNREFUSED') {
        console.log('   ‚ùå Service de contenu non accessible');
        console.log('   Assurez-vous que le service est d√©marr√© sur le port 3003');
        return;
      }
      console.log('   ‚ÑπÔ∏è  Service accessible');
    }
    console.log('');

    // Test 2: R√©cup√©rer tous les cours
    console.log('2Ô∏è‚É£ Test: R√©cup√©ration de tous les cours');
    try {
      const response = await axios.get(`${API_BASE_URL}/courses`);
      
      console.log('   ‚úÖ R√©ponse re√ßue');
      console.log(`   Type de r√©ponse: ${typeof response.data}`);
      
      if (Array.isArray(response.data)) {
        console.log(`   Nombre de cours: ${response.data.length}`);
        console.log('   Format: Tableau simple');
        
        if (response.data.length > 0) {
          console.log('   Premier cours:', {
            title: response.data[0].title,
            category: response.data[0].category,
            level: response.data[0].level
          });
        }
      } else if (response.data && response.data.courses) {
        console.log(`   Nombre de cours: ${response.data.courses.length}`);
        console.log(`   Total: ${response.data.total}`);
        console.log(`   Page: ${response.data.page}`);
        console.log(`   Pages totales: ${response.data.totalPages}`);
        console.log('   Format: Objet avec pagination');
        
        if (response.data.courses.length > 0) {
          console.log('   Premier cours:', {
            title: response.data.courses[0].title,
            category: response.data.courses[0].category,
            level: response.data.courses[0].level
          });
        }
      } else {
        console.log('   ‚ùå Format de r√©ponse inattendu');
        console.log('   Donn√©es re√ßues:', JSON.stringify(response.data, null, 2));
      }
      
    } catch (error) {
      console.log('   ‚ùå Erreur lors de la r√©cup√©ration des cours:');
      console.log(`   Status: ${error.response?.status}`);
      console.log(`   Message: ${error.response?.data?.error || error.message}`);
    }
    console.log('');

    // Test 3: R√©cup√©rer les cours avec pagination
    console.log('3Ô∏è‚É£ Test: R√©cup√©ration avec pagination (limit=5)');
    try {
      const response = await axios.get(`${API_BASE_URL}/courses?limit=5`);
      
      if (response.data && response.data.courses) {
        console.log(`   ‚úÖ Cours r√©cup√©r√©s: ${response.data.courses.length}`);
        console.log(`   Total disponible: ${response.data.total}`);
        console.log(`   Page actuelle: ${response.data.page}`);
        console.log(`   Pages totales: ${response.data.totalPages}`);
      } else {
        console.log('   ‚ùå Format de r√©ponse inattendu pour la pagination');
      }
      
    } catch (error) {
      console.log('   ‚ùå Erreur lors de la r√©cup√©ration avec pagination:');
      console.log(`   Status: ${error.response?.status}`);
      console.log(`   Message: ${error.response?.data?.error || error.message}`);
    }
    console.log('');

    // Test 4: R√©cup√©rer les filtres disponibles
    console.log('4Ô∏è‚É£ Test: R√©cup√©ration des filtres disponibles');
    try {
      const response = await axios.get(`${API_BASE_URL}/courses/filters`);
      
      console.log('   ‚úÖ Filtres r√©cup√©r√©s');
      console.log('   Cat√©gories:', response.data.categories);
      console.log('   Niveaux:', response.data.levels);
      
    } catch (error) {
      console.log('   ‚ùå Erreur lors de la r√©cup√©ration des filtres:');
      console.log(`   Status: ${error.response?.status}`);
      console.log(`   Message: ${error.response?.data?.error || error.message}`);
    }
    console.log('');

    // Test 5: Test avec un filtre sp√©cifique
    console.log('5Ô∏è‚É£ Test: Filtrage par cat√©gorie (programming)');
    try {
      const response = await axios.get(`${API_BASE_URL}/courses?category=programming`);
      
      if (response.data && response.data.courses) {
        console.log(`   ‚úÖ Cours trouv√©s: ${response.data.courses.length}`);
        if (response.data.courses.length > 0) {
          console.log('   Premier cours filtr√©:', {
            title: response.data.courses[0].title,
            category: response.data.courses[0].category
          });
        }
      } else if (Array.isArray(response.data)) {
        console.log(`   ‚úÖ Cours trouv√©s: ${response.data.length}`);
        if (response.data.length > 0) {
          console.log('   Premier cours filtr√©:', {
            title: response.data[0].title,
            category: response.data[0].category
          });
        }
      }
      
    } catch (error) {
      console.log('   ‚ùå Erreur lors du filtrage:');
      console.log(`   Status: ${error.response?.status}`);
      console.log(`   Message: ${error.response?.data?.error || error.message}`);
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
    if (error.response) {
      console.error('   D√©tails:', error.response.data);
    }
  }
}

// Ex√©cuter le test
testCoursesAPI();


