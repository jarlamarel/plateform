#!/usr/bin/env node

/**
 * üéØ Script d'Attribution des Cours √† un Instructeur
 * 
 * Ce script attribue TOUS les cours existants √† l'instructeur sp√©cifi√© :
 * - Email: instructor@test.com
 * - Nom: Test
 * - Pr√©nom: Instructor
 * 
 * Usage:
 *   node scripts/assign-courses-to-instructor.js
 * 
 * Options:
 *   --create-instructor : Cr√©e l'instructeur s'il n'existe pas
 *   --create-test-course : Cr√©e un cours de test en plus
 *   --dry-run : Simule les changements sans les appliquer
 */

const mongoose = require('mongoose');
const path = require('path');

// Configuration
const config = require('../src/config');

// Mod√®les
const Course = require('../src/models/course.model');
const Lesson = require('../src/models/lesson.model');

// Configuration de l'instructeur cible
const TARGET_INSTRUCTOR = {
  email: 'instructor@test.com',
  firstName: 'Test',
  lastName: 'Instructor',
  role: 'instructor'
};

// Couleurs pour les logs
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

const log = {
  info: (msg) => console.log(`${colors.blue}‚ÑπÔ∏è  ${msg}${colors.reset}`),
  success: (msg) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
  warning: (msg) => console.log(`${colors.yellow}‚ö†Ô∏è  ${msg}${colors.reset}`),
  error: (msg) => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`),
  title: (msg) => console.log(`${colors.cyan}${colors.bright}üéØ ${msg}${colors.reset}\n`),
  separator: () => console.log(`${colors.magenta}${'='.repeat(60)}${colors.reset}`)
};

// Arguments de ligne de commande
const args = process.argv.slice(2);
const options = {
  createInstructor: args.includes('--create-instructor'),
  createTestCourse: args.includes('--create-test-course'),
  dryRun: args.includes('--dry-run')
};

/**
 * Connexion √† MongoDB
 */
async function connectDB() {
  try {
    // Configuration MongoDB sans les options d√©pr√©ci√©es
    const mongoOptions = {
      // Suppression des options d√©pr√©ci√©es useNewUrlParser et useUnifiedTopology
    };
    
    await mongoose.connect(config.database.uri, mongoOptions);
    log.success('Connexion √† MongoDB √©tablie');
  } catch (error) {
    log.error(`Erreur de connexion MongoDB: ${error.message}`);
    process.exit(1);
  }
}

/**
 * D√©connexion de MongoDB
 */
async function disconnectDB() {
  try {
    await mongoose.connection.close();
    log.info('Connexion MongoDB ferm√©e');
  } catch (error) {
    log.warning(`Erreur lors de la fermeture: ${error.message}`);
  }
}

/**
 * Trouve ou cr√©e l'instructeur cible
 */
async function findOrCreateInstructor() {
  log.info('Recherche de l\'instructeur cible...');
  
  // Mod√®le User (collection users dans auth-service)
  const UserSchema = new mongoose.Schema({}, { strict: false });
  const User = mongoose.model('User', UserSchema, 'users');
  
  let instructor = await User.findOne({ email: TARGET_INSTRUCTOR.email });
  
  if (instructor) {
    log.success(`Instructeur trouv√©: ${instructor.firstName} ${instructor.lastName} (${instructor.email})`);
    log.info(`ID: ${instructor._id}`);
    log.info(`R√¥le: ${instructor.role}`);
    
    return instructor;
  }
  
  if (options.createInstructor) {
    log.warning('Instructeur non trouv√©, cr√©ation en cours...');
    
    if (options.dryRun) {
      log.info('[DRY RUN] Instructeur serait cr√©√© avec les donn√©es:');
      console.log(JSON.stringify(TARGET_INSTRUCTOR, null, 2));
      return { _id: 'fake-id-for-dry-run', ...TARGET_INSTRUCTOR };
    }
    
    instructor = new User({
      ...TARGET_INSTRUCTOR,
      password: '$2b$10$example.hash.for.password123', // Hash fictif
      isVerified: true,
      createdAt: new Date(),
      updatedAt: new Date()
    });
    
    await instructor.save();
    log.success(`Instructeur cr√©√©: ${instructor.firstName} ${instructor.lastName}`);
    
    return instructor;
  }
  
  log.error('Instructeur non trouv√© !');
  log.info('Solutions possibles:');
  log.info('1. Utiliser --create-instructor pour le cr√©er automatiquement');
  log.info('2. Cr√©er manuellement: cd auth-service && node scripts/promote-user.js create-test');
  log.info('3. V√©rifier que l\'instructeur existe d√©j√† dans la base');
  
  return null;
}

/**
 * Attribue tous les cours √† l'instructeur
 */
async function assignCoursesToInstructor(instructorId) {
  log.info('R√©cup√©ration de tous les cours...');
  
  const courses = await Course.find({ isDeleted: { $ne: true } });
  log.info(`${courses.length} cours trouv√©(s)`);
  
  if (courses.length === 0) {
    log.warning('Aucun cours trouv√© dans la base de donn√©es');
    return { updated: 0, skipped: 0 };
  }
  
  let updated = 0;
  let skipped = 0;
  
  log.separator();
  log.title('Attribution des cours');
  
  for (const course of courses) {
    const currentInstructor = course.instructor?.toString();
    const targetInstructor = instructorId.toString();
    
    console.log(`\nüìö Cours: "${course.title}"`);
    log.info(`   ID: ${course._id}`);
    log.info(`   Statut: ${course.status}`);
    log.info(`   Instructeur actuel: ${currentInstructor || 'Non d√©fini'}`);
    
    if (currentInstructor === targetInstructor) {
      log.success('   ‚úÖ D√©j√† attribu√© au bon instructeur');
      skipped++;
      continue;
    }
    
    if (options.dryRun) {
      log.warning('   [DRY RUN] Serait mis √† jour');
      updated++;
      continue;
    }
    
    try {
      await Course.findByIdAndUpdate(
        course._id,
        { 
          instructor: instructorId,
          updatedAt: new Date()
        },
        { new: true }
      );
      
      log.success('   ‚úÖ Instructeur mis √† jour');
      updated++;
      
    } catch (error) {
      log.error(`   ‚ùå Erreur: ${error.message}`);
    }
  }
  
  return { updated, skipped };
}

/**
 * Attribue toutes les le√ßons √† l'instructeur
 */
async function assignLessonsToInstructor(instructorId) {
  log.info('R√©cup√©ration de toutes les le√ßons...');
  
  const lessons = await Lesson.find({});
  log.info(`${lessons.length} le√ßon(s) trouv√©e(s)`);
  
  if (lessons.length === 0) {
    return { updated: 0, skipped: 0 };
  }
  
  let updated = 0;
  let skipped = 0;
  
  for (const lesson of lessons) {
    const currentInstructor = lesson.instructor?.toString();
    const targetInstructor = instructorId.toString();
    
    if (currentInstructor === targetInstructor) {
      skipped++;
      continue;
    }
    
    if (options.dryRun) {
      updated++;
      continue;
    }
    
    try {
      await Lesson.findByIdAndUpdate(
        lesson._id,
        { 
          instructor: instructorId,
          updatedAt: new Date()
        }
      );
      updated++;
    } catch (error) {
      log.error(`Erreur le√ßon ${lesson._id}: ${error.message}`);
    }
  }
  
  return { updated, skipped };
}

/**
 * Cr√©e un cours de test
 */
async function createTestCourse(instructorId) {
  if (!options.createTestCourse) return null;
  
  log.info('Cr√©ation d\'un cours de test...');
  
  const testCourseData = {
    title: 'üéØ Cours de Test - Upload Vid√©o',
    description: 'Cours cr√©√© automatiquement pour tester l\'upload de vid√©os et la gestion des le√ßons. Ce cours contient des le√ßons d\'exemple pr√™tes pour recevoir des vid√©os.',
    instructor: instructorId,
    category: 'programming',
    level: 'beginner',
    price: 0,
    duration: 180,
    thumbnail: 'https://via.placeholder.com/400x300/4CAF50/white?text=Cours+de+Test',
    status: 'published',
    requirements: [
      'Aucun pr√©requis n√©cessaire',
      'Motivation pour apprendre',
      'Ordinateur avec connexion internet'
    ],
    objectives: [
      'Comprendre le syst√®me d\'upload de vid√©os',
      'Ma√Ætriser la gestion des le√ßons',
      'Tester les fonctionnalit√©s d\'instructeur'
    ],
    tags: ['test', 'upload', 'vid√©o', 'd√©mo'],
    rating: { average: 0, count: 0 },
    enrolledStudents: [],
    lessons: [],
    isDeleted: false
  };
  
  if (options.dryRun) {
    log.info('[DRY RUN] Cours de test serait cr√©√© avec les donn√©es:');
    console.log(JSON.stringify(testCourseData, null, 2));
    return { _id: 'fake-course-id' };
  }
  
  const course = new Course(testCourseData);
  await course.save();
  
  log.success(`Cours de test cr√©√©: ${course.title}`);
  log.info(`ID du cours: ${course._id}`);
  
  // Cr√©er des le√ßons de test
      const testLessons = [
      {
        title: 'üìπ Le√ßon 1: Introduction aux Vid√©os',
        description: 'Premi√®re le√ßon pour tester l\'upload de vid√©os',
        content: 'Cette le√ßon est pr√™te √† recevoir votre premi√®re vid√©o. Utilisez l\'interface d\'upload pour ajouter du contenu vid√©o.',
        duration: 30,
        order: 1,
        courseId: course._id,
        instructor: instructorId,
        isPublished: true
      },
      {
        title: 'üé¨ Le√ßon 2: Techniques Avanc√©es',
        description: 'Deuxi√®me le√ßon pour des vid√©os plus complexes',
        content: 'Cette le√ßon peut contenir des vid√©os de d√©monstration, des tutoriels ou des pr√©sentations.',
        duration: 45,
        order: 2,
        courseId: course._id,
        instructor: instructorId,
        isPublished: true
      },
      {
        title: 'üöÄ Le√ßon 3: Projet Pratique',
        description: 'Le√ßon pratique avec projet √† r√©aliser',
        content: 'Utilisez cette le√ßon pour uploader des vid√©os de projet, des corrections ou des d√©monstrations pratiques.',
        duration: 60,
        order: 3,
        courseId: course._id,
        instructor: instructorId,
        isPublished: true
      }
    ];
  
  const createdLessons = [];
  for (const lessonData of testLessons) {
    const lesson = new Lesson(lessonData);
    await lesson.save();
    createdLessons.push(lesson._id);
    log.success(`Le√ßon cr√©√©e: ${lesson.title}`);
  }
  
  // Mettre √† jour le cours avec les le√ßons
  course.lessons = createdLessons;
  await course.save();
  
  return course;
}

/**
 * Affiche un r√©sum√© des op√©rations
 */
function displaySummary(results, instructor, testCourse) {
  log.separator();
  log.title('üìä R√âSUM√â DES OP√âRATIONS');
  
  console.log(`${colors.bright}üë§ Instructeur cible:${colors.reset}`);
  console.log(`   Nom: ${instructor.firstName} ${instructor.lastName}`);
  console.log(`   Email: ${instructor.email}`);
  console.log(`   ID: ${instructor._id}`);
  
  console.log(`\n${colors.bright}üìö Cours:${colors.reset}`);
  console.log(`   Mis √† jour: ${results.courses.updated}`);
  console.log(`   D√©j√† corrects: ${results.courses.skipped}`);
  console.log(`   Total trait√©: ${results.courses.updated + results.courses.skipped}`);
  
  console.log(`\n${colors.bright}üìù Le√ßons:${colors.reset}`);
  console.log(`   Mises √† jour: ${results.lessons.updated}`);
  console.log(`   D√©j√† correctes: ${results.lessons.skipped}`);
  console.log(`   Total trait√©: ${results.lessons.updated + results.lessons.skipped}`);
  
  if (testCourse) {
    console.log(`\n${colors.bright}üéØ Cours de test:${colors.reset}`);
    console.log(`   Cr√©√©: ${testCourse.title}`);
    console.log(`   ID: ${testCourse._id}`);
  }
  
  if (options.dryRun) {
    log.warning('\n‚ö†Ô∏è  Mode DRY RUN - Aucune modification r√©elle effectu√©e');
    log.info('Relancez sans --dry-run pour appliquer les changements');
  } else {
    log.success('\nüéâ Toutes les op√©rations ont √©t√© effectu√©es avec succ√®s !');
  }
  
  console.log(`\n${colors.bright}üöÄ Prochaines √©tapes:${colors.reset}`);
  console.log('1. Connectez-vous avec instructor@test.com');
  console.log('2. Allez sur la page des cours');
  console.log('3. Cliquez sur "G√©rer les le√ßons" sur n\'importe quel cours');
  console.log('4. Uploadez vos vid√©os via l\'interface graphique !');
}

/**
 * Fonction principale
 */
async function main() {
  try {
    log.title('ATTRIBUTION DES COURS √Ä L\'INSTRUCTEUR');
    
    if (options.dryRun) {
      log.warning('Mode DRY RUN activ√© - Simulation uniquement');
    }
    
    // Connexion √† la base de donn√©es
    await connectDB();
    
    // Trouver ou cr√©er l'instructeur
    const instructor = await findOrCreateInstructor();
    if (!instructor) {
      process.exit(1);
    }
    
    // Attribution des cours
    log.separator();
    const courseResults = await assignCoursesToInstructor(instructor._id);
    
    // Attribution des le√ßons
    log.separator();
    log.title('Attribution des le√ßons');
    const lessonResults = await assignLessonsToInstructor(instructor._id);
    log.success(`${lessonResults.updated} le√ßon(s) mise(s) √† jour, ${lessonResults.skipped} d√©j√† correcte(s)`);
    
    // Cr√©ation d'un cours de test si demand√©
    let testCourse = null;
    if (options.createTestCourse) {
      log.separator();
      log.title('Cr√©ation du cours de test');
      testCourse = await createTestCourse(instructor._id);
    }
    
    // Affichage du r√©sum√©
    displaySummary({
      courses: courseResults,
      lessons: lessonResults
    }, instructor, testCourse);
    
  } catch (error) {
    log.error(`Erreur fatale: ${error.message}`);
    console.error(error.stack);
    process.exit(1);
  } finally {
    await disconnectDB();
  }
}

// Gestion des signaux de fermeture
process.on('SIGINT', async () => {
  log.warning('\nInterruption d√©tect√©e, fermeture propre...');
  await disconnectDB();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  log.warning('\nTerminaison d√©tect√©e, fermeture propre...');
  await disconnectDB();
  process.exit(0);
});

// Affichage de l'aide
if (args.includes('--help') || args.includes('-h')) {
  console.log(`
${colors.cyan}üéØ Script d'Attribution des Cours √† un Instructeur${colors.reset}

${colors.bright}Usage:${colors.reset}
  node scripts/assign-courses-to-instructor.js [options]

${colors.bright}Options:${colors.reset}
  --create-instructor    Cr√©e l'instructeur s'il n'existe pas
  --create-test-course   Cr√©e un cours de test avec 3 le√ßons
  --dry-run             Simule les changements sans les appliquer
  --help, -h            Affiche cette aide

${colors.bright}Exemples:${colors.reset}
  # Attribution simple (instructeur doit exister)
  node scripts/assign-courses-to-instructor.js

  # Cr√©ation de l'instructeur + attribution
  node scripts/assign-courses-to-instructor.js --create-instructor

  # Tout en un : instructeur + cours de test + attribution
  node scripts/assign-courses-to-instructor.js --create-instructor --create-test-course

  # Simulation (aucune modification)
  node scripts/assign-courses-to-instructor.js --dry-run

${colors.bright}Instructeur cible:${colors.reset}
  Email: instructor@test.com
  Nom: Test Instructor
  R√¥le: instructor
`);
  process.exit(0);
}

// Lancement du script
main();
